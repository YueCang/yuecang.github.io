<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Zookeeper</title>
    <link href="/2023/12/22/Zookeeper/"/>
    <url>/2023/12/22/Zookeeper/</url>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper教程"><a href="#Zookeeper教程" class="headerlink" title="Zookeeper教程"></a>Zookeeper教程</h1><p><a href="https://zookeeper.apache.org/">Zookeeper官方网站</a></p><h2 id="重点内容"><a href="#重点内容" class="headerlink" title="重点内容"></a>重点内容</h2><ul><li>Zookeeper分布式锁案例</li><li>Paxos算法</li><li>ZAB协议</li><li>CAP</li><li>源码（ZK服务端初始化源码、服务端加载数据源码、选举算法、状态同步算法、Leader启动算法、Follower启动源码、客户端启动源码）</li></ul><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><ol><li>Zookeeper：一个Leader，多个Follower组成的集群</li><li>集群只要<strong>半数以上节点存活</strong>，zk集群服务就能正常使用，所以zk适合安装奇数台服务器</li><li>全局数据一致：每个server保存一份相同的数据副本，client无论连接哪个server，数据都是一致的</li><li>更新请求顺序执行，来自同一个client的更新请求按其发送顺序一次执行</li><li>数据更新原子性，一次数据更新要么成功，要么失败</li><li>实时性，在一定时间范围内，client能读到最新数据</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>统一命名服务</li><li>统一配置管理</li><li>统一集群管理</li><li>服务器动态上下线</li><li>软负载均衡</li></ul><h2 id="单机安装"><a href="#单机安装" class="headerlink" title="单机安装"></a>单机安装</h2><ol><li><p>安装JDK</p></li><li><p>上传 <strong>apache-zookeeper-3.5.7-bin.tar.gz</strong>，并解压到指定路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C /opt/module<br></code></pre></td></tr></table></figure></li><li><p>修改配置文件，修改数据存储路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据存储文件夹</span><br>[root@hadoop01 zookeeper-3.5.7]# mkdir zkData<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改zk数据存储路径，其余参数不需要修改</span><br>[root@hadoop01 conf]# vim zoo.cfg<br>dataDir=/opt/module/zookeeper-3.5.7/zkData<br></code></pre></td></tr></table></figure></li><li><p>启动zk服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动zk服务</span><br>[root@hadoop01 zookeeper-3.5.7]# bin/zkServer.sh start conf/zoo.cfg <br>ZooKeeper JMX enabled by default<br>Using config: conf/zoo.cfg<br>Starting zookeeper ... STARTED<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看zk服务状态</span><br>[root@hadoop01 zookeeper-3.5.7]# bin/zkServer.sh status<br>ZooKeeper JMX enabled by default<br>Using config: /opt/module/zookeeper-3.5.7/bin/../conf/zoo.cfg<br>Client port found: 2181. Client address: localhost.<br>Mode: standalone<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止zk服务</span><br>[root@hadoop01 zookeeper-3.5.7]# bin/zkServer.sh stop<br>ZooKeeper JMX enabled by default<br>Using config: /opt/module/zookeeper-3.5.7/bin/../conf/zoo.cfg<br>Stopping zookeeper ... STOPPED<br></code></pre></td></tr></table></figure></li><li><p>查看zk进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">jps</span><br>[root@hadoop01 zookeeper-3.5.7]# jps -l<br>2368 org.apache.zookeeper.server.quorum.QuorumPeerMain<br>2445 sun.tools.jps.Jps<br></code></pre></td></tr></table></figure></li></ol><h2 id="配置参数详解"><a href="#配置参数详解" class="headerlink" title="配置参数详解"></a>配置参数详解</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通信心跳时间，zk服务器与客户端心跳时间，单位毫秒</span><br>tickTime=2000<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">LF(Leader、Follower)初始通信时限，10个心跳时间（tickTime的数量）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">即容忍多少个心跳时限连接</span><br>initLimit=10<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">LF同步通信时限，若超过该时限，Leader认为Follower挂掉，从服务器列表中删除Follower</span><br>syncLimit=5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存zk中的数据</span><br>dataDir=/opt/module/zookeeper-3.5.7/zkData<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">客户端连接端口，一般不修改</span><br>clientPort=2181<br></code></pre></td></tr></table></figure><h2 id="集群安装"><a href="#集群安装" class="headerlink" title="集群安装"></a>集群安装</h2><ol><li><p>集群规划</p><p><strong>思考：如果是10台服务器，需要安装多少台zk？</strong></p></li><li><p>配置好同步分发文件脚本</p><p><a href="xsync.md" title=":include">同步脚本</a></p></li><li><p>解压安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C /opt/module<br></code></pre></td></tr></table></figure></li><li><p>配置服务器编号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据存储目录</span><br>[root@hadoop01 zookeeper-3.5.7]# mkdir zkData<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在数据存储路径下创建myid文件,确保每台服务器均有唯一编号即可</span><br>[root@hadoop01 zkData]# vim myid<br>1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">同步分发配置过的zk</span><br>[root@hadoop01 module]# xsync zookeeper-3.5.7/<br></code></pre></td></tr></table></figure></li><li><p>配置zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">tickTime=2000<br><br>initLimit=10<br><br>syncLimit=5<br><br>dataDir=/opt/module/zookeeper-3.5.7/zkData<br><br>clientPort=2181<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加以下内容</span><br>server.1=hadoop01:2888:3888<br>server.2=hadoop02:2888:3888<br></code></pre></td></tr></table></figure><p><strong>server.A&#x3D;B:C:D，参数解释</strong></p><ul><li>A：表示第几台服务器，即myid所配置的对应值</li><li>B：服务器地址</li><li>C：Follower与Leader交换信息的端口</li><li>D：如果集群中的Leader挂掉，需要使用新的端口进行重新选举，选出新的Leader</li></ul></li><li><p>启动集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">每一台服务器全部启动zk服务即可</span><br>[root@hadoop01 zookeeper-3.5.7]# bin/zkServer.sh start conf/zoo.cfg <br>ZooKeeper JMX enabled by default<br>Using config: conf/zoo.cfg<br>Starting zookeeper ... STARTED<br><br>[root@hadoop02 zookeeper-3.5.7]# bin/zkServer.sh start conf/zoo.cfg<br>ZooKeeper JMX enabled by default<br>Using config: conf/zoo.cfg<br>Starting zookeeper ... STARTED<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看zk服务状态</span><br>[root@hadoop01 zookeeper-3.5.7]# bin/zkServer.sh status<br>ZooKeeper JMX enabled by default<br>Using config: /opt/module/zookeeper-3.5.7/bin/../conf/zoo.cfg<br>Client port found: 2181. Client address: localhost.<br>Mode: follower<br><br>[root@hadoop02 zookeeper-3.5.7]# bin/zkServer.sh status<br>ZooKeeper JMX enabled by default<br>Using config: /opt/module/zookeeper-3.5.7/bin/../conf/zoo.cfg<br>Client port found: 2181. Client address: localhost.<br>Mode: leader<br></code></pre></td></tr></table></figure></li></ol><h2 id="zookeeper可视化工具（-PrettyZoo-）"><a href="#zookeeper可视化工具（-PrettyZoo-）" class="headerlink" title="zookeeper可视化工具（  PrettyZoo ）"></a>zookeeper可视化工具（  PrettyZoo ）</h2><p>PrettyZoo下载地址：<a href="https://github.com/vran-dev/PrettyZoo/releases">https://github.com/vran-dev/PrettyZoo/releases</a></p><p>Windows：prettyZoo-win.msi</p><p>Mac: prettyZoo-mac.dmg</p><p>Linux: prettyZoo-rpm &#x2F; prettyZoo.deb</p><h2 id="ZK选举机制"><a href="#ZK选举机制" class="headerlink" title="ZK选举机制"></a>ZK选举机制</h2><img src="/2023/12/22/Zookeeper/1638500972903.png" class="" width="1638500972903"><h3 id="第一次启动"><a href="#第一次启动" class="headerlink" title="第一次启动"></a>第一次启动</h3><ol><li>Server1启动，发起第一次选举，Server1投票给自己，此时Server1为1票，不够半数以上（3票），选举无法完成，Server1保持LOOKING状态</li><li>Server2启动，发起选举，<strong>Server1和Server2分别投自己一票，1和2交换选票信息，1发现2投票的服务器的myid比自己选举投票的服务器myid大，1将自己的选票投给2，此时1为0票，2为2票，仍然未达到半数以上</strong>，选举未完成，1和2处在LOOKING状态</li><li>Server3启动，发起投票，<strong>1（投了2）、2（投了2）和3交换选票信息，发现3选举的服务器myid比自己选举投票的服务器myid大，1、2改投3，此时1为0票，2为0票，3为3票（达到半数以上）</strong>，1、2修改状态为FOLLWING，3修改状态为LEADING</li><li>Server4启动，发起一次选举，<strong>此时1、2、3没有处在LOOKING状态，不修改选票信息，4少数服从多数，将选票投给3，此时3为4票，4为0票，4修改状态为FOLLWING</strong></li><li>Server5启动，发起一次选举，此时1、2、3、4没有处在LOOKING状态，不修改选票信息，5少数服从多数，将选票投给3，此时3为5票，5为0票，5修改状态为FOLLOWING</li></ol><h3 id="非第一次启动"><a href="#非第一次启动" class="headerlink" title="非第一次启动"></a>非第一次启动</h3><ol><li><p>当ZK集群中的一台S服务器出现以下两种情况时，就会开始进入Leader选举：</p><ul><li>服务器初始化，相当于添加服务器到ZK集群</li><li>服务器运行期间无法和Leader服务器保持连接</li></ul></li><li><p>当一台机器进入Leader选举流程时，当前集群可能存在以下两种状态：</p><ul><li><p>集群中的Leader仍然存在。服务器试图选举时，会被告知Leader的信息，对该服务器来说，只需要和Leader建立连接，并进行状态的同步即可</p></li><li><p>集群中的Leader确实不存在了。</p><p>假设ZK集群有5台服务器组成，SID分别为1、2、3、4、5，ZXID分别为8、8、8、7、7，并且SID为3的服务器是Leader。某一时刻3、5服务器出现故障，因为开始进行Leader选举：</p><pre><code class="hljs">                    括号中的参数顺序为：（EPOCH，ZXID，SID）</code></pre><p>SID为1、2、4的机器投票情况为：（1，8，1） （1，8，2）（1，7，4）<strong>最终2为Leader</strong></p><p><strong>比较顺序为：</strong></p><ul><li><strong>EPOCH大时，投票给EPOCH大的</strong></li><li><strong>EPOCH相同，投票给ZXID大的</strong></li><li><strong>EPOCH、ZXID相同时，投给SID大的</strong></li></ul></li></ul></li></ol><h2 id="集群启动脚本"><a href="#集群启动脚本" class="headerlink" title="集群启动脚本"></a>集群启动脚本</h2><p>编写集群启动脚本，记得修改脚本中的主机名称为对应集群的主机名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>case $1 in<br>&quot;start&quot;)&#123;<br>for i in hadoop01 hadoop02<br>do<br>echo -------------------- Zookeeper $i 启动 ------------------------<br>ssh $i &quot;/opt/module/zookeeper-3.5.7/bin/zkServer.sh start /opt/module/zookeeper-3.5.7/conf/zoo.cfg&quot;<br>done<br>&#125;<br>;;<br>&quot;stop&quot;)&#123;<br>for i in hadoop01 hadoop02<br>do<br>echo -------------------- Zookeeper $i 停止 ------------------------<br>ssh $i &quot;/opt/module/zookeeper-3.5.7/bin/zkServer.sh stop&quot;<br>done<br>&#125;<br>;;<br>&quot;status&quot;)&#123;<br>for i in hadoop01 hadoop02<br>do<br>echo -------------------- Zookeeper $i 状态 ------------------------<br>ssh $i &quot;/opt/module/zookeeper-3.5.7/bin/zkServer.sh status&quot;<br>done<br>&#125;<br>;;<br>esac<br></code></pre></td></tr></table></figure><h2 id="ZK客户端"><a href="#ZK客户端" class="headerlink" title="ZK客户端"></a>ZK客户端</h2><ul><li><p>启动客户端以及节点的相关参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动客户端</span><br>[root@hadoop01 ~]# cd /opt/module/zookeeper-3.5.7<br>[root@hadoop01 zookeeper-3.5.7]# bin/zkCli.sh -server hadoop01:2181<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动后查看节点参数</span><br>[zk: hadoop01:2181(CONNECTED) 3] ls -s /<br>[zookeeper]<br>cZxid = 0x0# 创建节点的事务ID<br>ctime = Thu Jan 01 08:00:00 CST 1970# znode被创建的毫秒数<br>mZxid = 0x0# znode最后更新的事务ID<br>mtime = Thu Jan 01 08:00:00 CST 1970# znode最后更新的时间<br>pZxid = 0x0# znode最后更新的子节点的zxid<br>cversion = -1# znode子节点变化号，znode子节点修改次数<br>dataVersion = 0# znode数据变化号<br>aclVersion = 0# znode访问控制列表的变化号<br>ephemeralOwner = 0x0 # 如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则为0<br>dataLength = 0# znode的数据长度<br>numChildren = 1# znode的子节点数量<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取节点的值</span><br>[zk: hadoop01:2181(CONNECTED) 12] get -s /sanguo<br>sanguo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改节点的值</span><br>[zk: hadoop01:2181(CONNECTED) 2] set /sanguo &quot;luoguanzhong&quot;<br>[zk: hadoop01:2181(CONNECTED) 3] get /sanguo<br>luoguanzhong<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除单个节点</span><br>[zk: hadoop01:2181(CONNECTED) 4] delete /sanguo/weiguo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">递归删除节点及子节点</span><br>[zk: hadoop01:2181(CONNECTED) 5] deleteall /sanguo<br></code></pre></td></tr></table></figure></li><li><p>监听器</p><ul><li>监听节点的值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">监听节点值得变化,注册一次就只能够监听一次</span><br>[zk: localhost:2181(CONNECTED) 1] get -w /sanguo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当节点的之发生变化时</span><br>[zk: localhost:2181(CONNECTED) 2] <br>WATCHER::<br><br>WatchedEvent state:SyncConnected type:NodeDataChanged path:/sanguo<br></code></pre></td></tr></table></figure><ul><li>监听节点子节点的变化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">监听节点值得变化,注册一次就只能够监听一次</span><br>[zk: localhost:2181(CONNECTED) 1] ls -w /sanguo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当节点的之发生变化时</span><br>[zk: localhost:2181(CONNECTED) 2] <br>WATCHER::<br><br>WatchedEvent state:SyncConnected type:NodeDataChanged path:/sanguo<br></code></pre></td></tr></table></figure></li></ul><h3 id="ZK节点类型"><a href="#ZK节点类型" class="headerlink" title="ZK节点类型"></a>ZK节点类型</h3><ul><li>持久（Persistent）：客户端和服务端断开连接后，创建的节点不删除</li><li>临时（Ephemeral）：客户端和服务端断开连接后，创建的节点被删除</li><li>无序节点：创建的节点名称后不自动添加序号</li><li>有序节点：创建的节点名称后自动添加序号</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动客户端</span><br>[root@hadoop01 zookeeper-3.5.7]# bin/zkCli.sh -server hadoop01:2181<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建持久节点（无序）</span><br>[zk: hadoop01:2181(CONNECTED) 0] create /sanguo &quot;sanguo&quot;<br><br>[zk: hadoop01:2181(CONNECTED) 0] ls /<br>[sanguo, zookeeper]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建临时节点（无序）</span><br>[zk: hadoop01:2181(CONNECTED) 0] create -e /xiyou &quot;xiyou&quot;<br><br>[zk: hadoop01:2181(CONNECTED) 0] ls /<br>[sanguo, xiyou, zookeeper]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建有序持久节点</span><br>[zk: hadoop01:2181(CONNECTED) 0] create -s /sanguo &quot;sanguo&quot;<br><br>[zk: hadoop01:2181(CONNECTED) 6] ls /<br>[sanguo, sanguo0000000002, xiyou, zookeeper]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建有序临时节点</span><br>[zk: hadoop01:2181(CONNECTED) 0] create -e -s /xiyou &quot;xiyou&quot;<br><br>[zk: hadoop01:2181(CONNECTED) 8] ls /<br>[sanguo, sanguo0000000002, xiyou, xiyou0000000003, zookeeper]<br></code></pre></td></tr></table></figure><h3 id="ZK客户端API"><a href="#ZK客户端API" class="headerlink" title="ZK客户端API"></a>ZK客户端API</h3><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>相关代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bin.zk;<br><br><span class="hljs-keyword">import</span> org.apache.zookeeper.*;<br><span class="hljs-keyword">import</span> org.apache.zookeeper.data.Stat;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: zk客户端</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> YueCang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/6 15:41</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZkClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">connectString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;192.168.24.10:2181,192.168.24.11:2181&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">sessionTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">private</span> ZooKeeper zkClient;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        zkClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(WatchedEvent watchedEvent)</span> &#123;<br>                <span class="hljs-comment">// 相关监听代码</span><br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, KeeperException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nodeCreate</span> <span class="hljs-operator">=</span> zkClient.create(<span class="hljs-string">&quot;/bin&quot;</span>,<br>                <span class="hljs-string">&quot;ceshi&quot;</span>.getBytes(),<br>                ZooDefs.Ids.OPEN_ACL_UNSAFE,<br>                CreateMode.PERSISTENT_SEQUENTIAL);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getChildren</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, KeeperException &#123;<br>        List&lt;String&gt; children = zkClient.getChildren(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-keyword">for</span> (String child : children) &#123;<br>            System.out.println(child);<br>        &#125;<br><br>        Thread.sleep(Long.MAX_VALUE);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exists</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, KeeperException &#123;<br>        <span class="hljs-type">Stat</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> zkClient.exists(<span class="hljs-string">&quot;/bin&quot;</span>, <span class="hljs-literal">false</span>);<br><br>        System.out.println(stat == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;not exist&quot;</span> : <span class="hljs-string">&quot;exist&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ZK的写流程"><a href="#ZK的写流程" class="headerlink" title="ZK的写流程"></a>ZK的写流程</h3><ul><li><p><strong>将写入请求发送给Leader</strong></p><img src="/2023/12/22/Zookeeper/1638862817737.png" class="" width="1638862817737"><ol><li>client将写入请求发送给Leader，Leader自身首先写入</li><li>Leader将写入请求发送给Follower，Follower写入</li><li>Follower写入后应答Leader</li><li>当ZK Server写入的数量达到半数以上，应答Client</li><li>其他未写完的Server继续写入数据</li><li>写完后应答Leader</li></ol></li><li><p><strong>将写入请求发送给Follower</strong></p><img src="/2023/12/22/Zookeeper/1638865261438.png" class="" width="1638865261438"></li></ul><h2 id="案例一：监听ZK服务器上下限"><a href="#案例一：监听ZK服务器上下限" class="headerlink" title="案例一：监听ZK服务器上下限"></a>案例一：监听ZK服务器上下限</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bin.case1;<br><br><span class="hljs-keyword">import</span> org.apache.zookeeper.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 服务器注册</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> YueCang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/7 17:38</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistributeServer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">connectString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hadoop01:2181,hadoop02:2181&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">sessionTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br>    <span class="hljs-keyword">private</span> ZooKeeper zk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, KeeperException &#123;<br>        <span class="hljs-type">DistributeServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DistributeServer</span>();<br><br>        <span class="hljs-comment">// 1.连接zk</span><br>        server.getConnect();<br><br>        <span class="hljs-comment">// 2.注册</span><br>        server.regist(args[<span class="hljs-number">0</span>]);<br><br>        <span class="hljs-comment">// 3.处理业务</span><br>        server.business();<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">business</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Thread.sleep(Long.MAX_VALUE);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regist</span><span class="hljs-params">(String hostName)</span> <span class="hljs-keyword">throws</span> InterruptedException, KeeperException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> zk.create(<span class="hljs-string">&quot;/servers/server&quot;</span>,<br>                hostName.getBytes(),<br>                ZooDefs.Ids.OPEN_ACL_UNSAFE,<br>                CreateMode.EPHEMERAL_SEQUENTIAL);<br><br>        System.out.println(hostName + <span class="hljs-string">&quot; is online&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getConnect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        zk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(WatchedEvent watchedEvent)</span> &#123;<br><br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bin.case1;<br><br><span class="hljs-keyword">import</span> org.apache.zookeeper.KeeperException;<br><span class="hljs-keyword">import</span> org.apache.zookeeper.WatchedEvent;<br><span class="hljs-keyword">import</span> org.apache.zookeeper.Watcher;<br><span class="hljs-keyword">import</span> org.apache.zookeeper.ZooKeeper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 客户端监听</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> YueCang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/7 17:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistributeClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">connectString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hadoop01:2181,hadoop02:2181&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">sessionTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br>    <span class="hljs-keyword">private</span> ZooKeeper zk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, KeeperException, IOException &#123;<br>        <span class="hljs-type">DistributeClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DistributeClient</span>();<br><br>        <span class="hljs-comment">// 1.获取连接</span><br>        client.getConnect();<br><br>        <span class="hljs-comment">// 2.获取服务器列表</span><br>        client.getServerList();<br><br>        <span class="hljs-comment">// 3.处理业务</span><br>        client.business();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">business</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Thread.sleep(Long.MAX_VALUE);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getServerList</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, KeeperException &#123;<br>        List&lt;String&gt; children = zk.getChildren(<span class="hljs-string">&quot;/servers&quot;</span>, <span class="hljs-literal">true</span>);<br><br>        ArrayList&lt;String&gt; servers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (String child : children) &#123;<br>            <span class="hljs-type">byte</span>[] data = zk.getData(<span class="hljs-string">&quot;/servers/&quot;</span> + child, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>            servers.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data));<br>        &#125;<br><br>        System.out.println(servers);<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getConnect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        zk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(WatchedEvent watchedEvent)</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    getServerList();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (KeeperException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ZK分布式锁案例"><a href="#ZK分布式锁案例" class="headerlink" title="ZK分布式锁案例"></a>ZK分布式锁案例</h2><img src="/2023/12/22/Zookeeper/1638931402278.png" class="" width="1638931402278">  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bin.case2;<br><br><span class="hljs-keyword">import</span> org.apache.zookeeper.*;<br><span class="hljs-keyword">import</span> org.apache.zookeeper.data.Stat;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> YueCang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/8 10:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistributeLock</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">connectString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hadoop01:2181,hadoop02:2181&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">sessionTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ZooKeeper zk;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">waitLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">private</span> String waitPath;<br>    <span class="hljs-keyword">private</span> String currentMode;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DistributeLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, KeeperException &#123;<br><br>        <span class="hljs-comment">// 连接ZK</span><br>        zk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZooKeeper</span>(connectString, sessionTimeout, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(WatchedEvent watchedEvent)</span> &#123;<br>                <span class="hljs-comment">// countDownLatch 释放锁</span><br>                <span class="hljs-keyword">if</span>(watchedEvent.getState() == Event.KeeperState.SyncConnected)&#123;<br>                    countDownLatch.countDown();<br>                &#125;<br><br>                <span class="hljs-comment">// waitLatch 释放锁</span><br>                <span class="hljs-keyword">if</span>(watchedEvent.getType() == Event.EventType.NodeDeleted<br>                        &amp;&amp; watchedEvent.getPath().equals(waitPath));<br>                waitLatch.countDown();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 等待ZK连接</span><br>        countDownLatch.await();<br><br>        <span class="hljs-comment">// 判断根节点/locks是否存在</span><br>        <span class="hljs-type">Stat</span> <span class="hljs-variable">rootExists</span> <span class="hljs-operator">=</span> zk.exists(<span class="hljs-string">&quot;/locks&quot;</span>, <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">// 根节点不存在就创建根节点</span><br>        <span class="hljs-keyword">if</span>(rootExists == <span class="hljs-literal">null</span>)&#123;<br>            zk.create(<span class="hljs-string">&quot;/locks&quot;</span>,<span class="hljs-string">&quot;locks&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">zkLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, KeeperException &#123;<br>        <span class="hljs-comment">// 创建有序临时节点</span><br>        currentMode = zk.create(<span class="hljs-string">&quot;/locks/seq-&quot;</span>,<br>                <span class="hljs-literal">null</span>,<br>                ZooDefs.Ids.OPEN_ACL_UNSAFE,<br>                CreateMode.EPHEMERAL_SEQUENTIAL);<br><br>        <span class="hljs-comment">// 判断当前节点是否是最小节点</span><br>        List&lt;String&gt; children = zk.getChildren(<span class="hljs-string">&quot;/locks&quot;</span>, <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-keyword">if</span>(children.size() == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 如果只有一个节点那么它必然是最小节点，直接返回即可</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            Collections.sort(children);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">currentNode</span> <span class="hljs-operator">=</span> currentMode.substring(<span class="hljs-string">&quot;/locks/&quot;</span>.length());<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> children.indexOf(currentNode);<br><br>            <span class="hljs-keyword">if</span>(index == -<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">// 索引为-1说明数据有问题</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;参数异常&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">// 索引为0说明该节点就是最小节点</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 监听前一个节点变化</span><br>                waitPath = <span class="hljs-string">&quot;/locks/&quot;</span> + children.get(index -<span class="hljs-number">1</span>);<br>                zk.getData(waitPath,<span class="hljs-literal">true</span>,<span class="hljs-literal">null</span>);<br><br>                <span class="hljs-comment">// 等待前一步骤执行完毕，在执行</span><br>                waitLatch.await();<br><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">zkUnlock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, KeeperException &#123;<br>        <span class="hljs-comment">// 删除节点</span><br>        zk.delete(currentMode,-<span class="hljs-number">1</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, KeeperException &#123;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">DistributeLock</span> <span class="hljs-variable">lock1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DistributeLock</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock1.zkLock();<br>                    System.out.println(<span class="hljs-string">&quot;线程1获取锁&quot;</span>);<br>                    Thread.sleep(<span class="hljs-number">5</span>*<span class="hljs-number">1000</span>);<br>                    lock1.zkUnlock();<br>                    System.out.println(<span class="hljs-string">&quot;线程1释放锁&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (KeeperException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">DistributeLock</span> <span class="hljs-variable">lock2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DistributeLock</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock2.zkLock();<br>                    System.out.println(<span class="hljs-string">&quot;线程2获取锁&quot;</span>);<br>                    Thread.sleep(<span class="hljs-number">5</span>*<span class="hljs-number">1000</span>);<br>                    lock2.zkUnlock();<br>                    System.out.println(<span class="hljs-string">&quot;线程2释放锁&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (KeeperException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分布式锁成熟框架Curator"><a href="#分布式锁成熟框架Curator" class="headerlink" title="分布式锁成熟框架Curator"></a>分布式锁成熟框架Curator</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-framework<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-recipes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bin.case3;<br><br><span class="hljs-keyword">import</span> org.apache.curator.RetryPolicy;<br><span class="hljs-keyword">import</span> org.apache.curator.framework.CuratorFramework;<br><span class="hljs-keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;<br><span class="hljs-keyword">import</span> org.apache.curator.framework.recipes.locks.InterProcessMutex;<br><span class="hljs-keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> YueCang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/9 10:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CuratorLock</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">InterProcessMutex</span> <span class="hljs-variable">lock1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterProcessMutex</span>(getCuratorFramework(), <span class="hljs-string">&quot;/locks&quot;</span>);<br><br>        <span class="hljs-type">InterProcessMutex</span> <span class="hljs-variable">lock2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterProcessMutex</span>(getCuratorFramework(), <span class="hljs-string">&quot;/locks&quot;</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock1.acquire();<br>                    System.out.println(<span class="hljs-string">&quot;线程1获取到锁&quot;</span>);<br><br>                    lock1.acquire();<br>                    System.out.println(<span class="hljs-string">&quot;线程1再次获取到锁&quot;</span>);<br><br>                    Thread.sleep(<span class="hljs-number">5000</span>);<br><br>                    lock1.release();<br>                    System.out.println(<span class="hljs-string">&quot;线程1释放锁&quot;</span>);<br><br>                    lock1.release();<br>                    System.out.println(<span class="hljs-string">&quot;线程1再次释放锁&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock2.acquire();<br>                    System.out.println(<span class="hljs-string">&quot;线程2获取到锁&quot;</span>);<br><br>                    lock2.acquire();<br>                    System.out.println(<span class="hljs-string">&quot;线程2再次获取到锁&quot;</span>);<br><br>                    Thread.sleep(<span class="hljs-number">5000</span>);<br><br>                    lock2.release();<br>                    System.out.println(<span class="hljs-string">&quot;线程2释放锁&quot;</span>);<br><br>                    lock2.release();<br>                    System.out.println(<span class="hljs-string">&quot;线程2再次释放锁&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CuratorFramework <span class="hljs-title function_">getCuratorFramework</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">ExponentialBackoffRetry</span> <span class="hljs-variable">retryPolicy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExponentialBackoffRetry</span>(<span class="hljs-number">3000</span>,<span class="hljs-number">3</span>);<br><br>        <span class="hljs-type">CuratorFramework</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> CuratorFrameworkFactory.builder()<br>                .connectString(<span class="hljs-string">&quot;hadoop01:2181,hadoop02:2181&quot;</span>)<br>                .connectionTimeoutMs(<span class="hljs-number">2000</span>)<br>                .sessionTimeoutMs(<span class="hljs-number">2000</span>)<br>                .retryPolicy(retryPolicy)<br>                .build();<br><br>        client.start();<br>        System.out.println(<span class="hljs-string">&quot;Zookeeper启动成功&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> client;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="企业面试题"><a href="#企业面试题" class="headerlink" title="企业面试题"></a>企业面试题</h2><h3 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h3><p>选举机制，超过半数的投票通过，即通过</p><ol><li><p>第一次启动选举规则：</p><p>投票过半数时，SID（服务器id）大的胜出</p></li><li><p>第二次启动选举规则：</p><ul><li>Epoch大的直接胜出</li><li>Epoch相同，ZXID（事务id）大的胜出</li><li>ZXID相同，SID（服务器id）大的胜出</li></ul></li></ol><h3 id="生产环境下集群安装多少台ZK合适"><a href="#生产环境下集群安装多少台ZK合适" class="headerlink" title="生产环境下集群安装多少台ZK合适"></a>生产环境下集群安装多少台ZK合适</h3><ul><li>安装奇数台</li><li>生产经验<ul><li>10台服务器，3台zk</li><li>20台服务器，5台zk</li><li>100台服务器，11台zk</li><li>200台服务器，11台zk</li></ul></li></ul><p><strong>Notes：服务器台数多的<code>好处</code>：提高了可靠性，<code>坏处</code>：提高了通信延迟</strong></p><h2 id="————-源码学习-————"><a href="#————-源码学习-————" class="headerlink" title="————-  源码学习 ————-"></a>————-  源码学习 ————-</h2><h2 id="拜占庭将军问题"><a href="#拜占庭将军问题" class="headerlink" title="拜占庭将军问题"></a>拜占庭将军问题</h2><blockquote><p>拜占庭将军问题（Byzantine failures），是由莱斯利·兰伯特提出的点对点通信中的基本问题。含义是在存在消息丢失的不可靠信道上试图通过消息传递的方式达到一致性是不可能的 </p></blockquote><h2 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h2><p><strong><code>Paxos算法：</code>一种基于消息传递且具有高度容错特性的一致性算法</strong></p><p><strong><code>解决的问题：</code>如何快速正确的在一个分布式系统中对某个数据值达成一致性，并且保证不论发生任何异常，都不会破坏整个系统的一致性</strong></p><p><strong>在一个Paxos算法系统中，首先将所有节点划分为Proposer（提议者），Acceptor（接收者），Learner（学习者）。</strong>（<strong>每个节点可能身兼数职</strong>）</p><ul><li>一个完整的Paxos算法流程分为三个阶段：</li></ul><h2 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h2><p><strong>ZAB协议内容：消息广播、崩溃恢复</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>BigData</tag>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CDH</title>
    <link href="/2023/12/21/CDH/"/>
    <url>/2023/12/21/CDH/</url>
    
    <content type="html"><![CDATA[<h1 id="CDH安装"><a href="#CDH安装" class="headerlink" title="CDH安装"></a>CDH安装</h1><ol><li><p>修改主机名称和host文件映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">修改主机名称，需全部进行修改</span><br>[root@hadoop0X ~]# hostnamectl set-hostname hadoop0X<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">host文件映射</span><br>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<br>192.168.24.10 hadoop01 hadoop01<br>192.168.24.11 hadoop02 hadoop02<br>192.168.24.12 hadoop03 hadoop03<br></code></pre></td></tr></table></figure></li><li><p>关闭防火墙和Selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭防火墙</span><br>systemctl stop firewalld<br>systemctl disable firewalld.service<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭Selinux</span><br>vim /etc/selinux/config<br><span class="hljs-meta prompt_"># </span><span class="language-bash">This file controls the state of SELinux on the system.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">SELINUX= can take one of these three values:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    enforcing - SELinux security policy is enforced.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    permissive - SELinux prints warnings instead of enforcing.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    disabled - No SELinux policy is loaded.</span><br>SELINUX=disabled<br><span class="hljs-meta prompt_"># </span><span class="language-bash">SELINUXTYPE= can take one of three values:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    targeted - Targeted processes are protected,</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    minimum - Modification of targeted policy. Only selected processes are protected.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    mls - Multi Level Security protection.</span><br>SELINUXTYPE=targeted<br><br>setenforce 0    # 临时关闭selinux<br>getenforce      # 查看selinux状态<br></code></pre></td></tr></table></figure></li><li><p>SSH免密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ssh免密</span><br>ssh-keygen -t rsa<br><br>ssh-copy-id hadoop01<br>ssh-copy-id hadoop02<br>ssh-copy-id hadoop03<br></code></pre></td></tr></table></figure></li><li><p>安装JDK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将jdk解压到 /usr/java 下</span><br>tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/java<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在/etc/profile文件中，配置环境变量</span><br>vim /etc/profile<br><br>export JAVA_HOME=/usr/java/jdk1.8.0_171<br>export JRE_HOME=/usr/java/jdk1.8.0_171/jre<br>export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH<br>export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:/opt/user-bin:$PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将文件分发给其他两台机器</span><br>scp -r /usr/java/ hadoop02:/usr<br>scp -r /usr/java/ hadoop03:/usr<br><br>scp /etc/profile hadoop02:/etc<br>scp /etc/profile hadoop03:/etc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使环境变量生效</span><br>[root@hadoop02 ~]# source /etc/profile<br>[root@hadoop03 ~]# source /etc/profile<br></code></pre></td></tr></table></figure><p><strong><code>Notes：</code>JDK安装路径一定要安装在 <code>/usr/java</code> 路径下，否则无法识别到JDK</strong></p></li><li><p>安装Mysql（两种方式任选其一）                                                   </p><ul><li><p>本地源安装mysql</p><ul><li><p>安装和启动httpd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装httpd</span><br>yum install -y httpd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动httpd</span><br>systemctl start httpd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置开机启动</span><br>systemctl enable httpd<br></code></pre></td></tr></table></figure></li><li><p>安装createrepo </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"> # </span><span class="language-bash">安装 createrepo</span><br>yum install -y createrepo<br> <br></code></pre></td></tr></table></figure></li><li><p>创建本地源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">createrepo /var/www/html/mysql_repos<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建文件 *.repo 一定要以repo为文件后缀名</span><br>touch /etc/yum.repos.d/mysql-local.repo<br>vim /etc/yum.repos.d/mysql-local.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">the RPMs of MySQL server</span><br>[mysql-local]<br>name=mysql-local<br>baseurl=http://hadoop01/mysql-repos<br>gpgcheck=0<br>enabled=1<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清空本地的yum源缓存</span><br>yum clean all<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新生成元数据</span><br>yum makecache<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用yum查看本地源文件</span><br>yum list | grep mysql-local<br></code></pre></td></tr></table></figure></li><li><p>安装Mysql（本地源形式）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装mysql</span><br>yum install -y mysql-community-server<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化mysql</span><br>mysqld --initialize --user=mysql --console<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动mysql</span><br>systemctl start mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开机自启</span><br>systemctl enable mysqld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改字符集</span> <br>vim /etc/my.cnf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">For advice on how to change settings please see</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt; 追加内容开始</span><br>[client]<br>port=3306<br>default-character-set=utf8<br>[mysql]<br>default-character-set=utf8<br><span class="hljs-meta prompt_"># </span><span class="language-bash">&lt;&lt;&lt; 追加内容结束</span><br>[mysqld]<br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Remove leading # and set to the amount of RAM for the most important data cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">innodb_buffer_pool_size = 128M</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Remove leading # to turn on a very important data integrity option: logging</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">changes to the binary <span class="hljs-built_in">log</span> between backups.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">log_bin</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Remove leading <span class="hljs-comment"># to set options mainly useful for reporting servers.</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">The server defaults are faster <span class="hljs-keyword">for</span> transactions and fast SELECTs.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">join_buffer_size = 128M</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sort_buffer_size = 2M</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">read_rnd_buffer_size = 2M</span><br>datadir=/var/lib/mysql<br>socket=/var/lib/mysql/mysql.sock<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Disabling symbolic-links is recommended to prevent assorted security risks</span><br>symbolic-links=0<br><br>log-error=/var/log/mysqld.log<br>pid-file=/var/run/mysqld/mysqld.pid<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt; 追加内容开始</span><br>collation-server=utf8_general_ci<br>character_set_server=utf8<br><span class="hljs-meta prompt_"># </span><span class="language-bash">&lt;&lt;&lt; 追加内容结束</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新启动mysql</span><br>systemctl restart mysqld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看原始密码</span><br>cat /var/log/mysqld.log | grep password<br>2020-12-18T09:11:35.497638Z 1 [Note] A temporary password is generated for root@localhost: 97iE:I.&gt;T6ea<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">登录mysql</span><br>mysql -uroot -p97iE:I.&gt;T6ea<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改密码</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">alter user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified by <span class="hljs-string">&#x27;Mysql@12#$&#x27;</span>;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看字符集，字符集需要都是utf8，否则插入中文会出现乱码</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show variables like <span class="hljs-string">&#x27;character%&#x27;</span>;</span><br>+--------------------------+----------------------------+<br>| Variable_name            | Value                      |<br>+--------------------------+----------------------------+<br>| character_set_client     | utf8                       |<br>| character_set_connection | utf8                       |<br>| character_set_database   | utf8                       |<br>| character_set_filesystem | binary                     |<br>| character_set_results    | utf8                       |<br>| character_set_server     | utf8                       |<br>| character_set_system     | utf8                       |<br>| character_sets_dir       | /usr/share/mysql/charsets/ |<br>+--------------------------+----------------------------+<br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启远程连接</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">User</span>,Host,authentication_string <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+-----------+-------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">User</span>          <span class="hljs-operator">|</span> Host      <span class="hljs-operator">|</span> authentication_string                     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+-----------+-------------------------------------------+</span><br><span class="hljs-operator">|</span> root          <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> <span class="hljs-operator">*</span><span class="hljs-number">6</span>BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.session <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> <span class="hljs-operator">*</span>THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.sys     <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> <span class="hljs-operator">*</span>THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+-----------+-------------------------------------------+</span><br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host<span class="hljs-operator">=</span><span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">where</span> host <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br><br>mysql<span class="hljs-operator">&gt;</span> flush privileges;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>阿里云centos7安装mysql8.0 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载安装mysql</span><br>sudo rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm<br>sudo yum -y install mysql-community-server --enablerepo=mysql80-community --nogpgcheck<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动mysql，查看初是密码</span><br>systemctl start mysqld<br>cat /var/log/mysqld.log | grep password<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改mysql默认密码</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;Cdh@123456&#x27;</span>;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">flush privileges;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启远程连接</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">flush privileges;</span> <br></code></pre></td></tr></table></figure></li></ul></li><li><p>安装CM服务</p><ul><li><p>Mysql中创建元数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE scm <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">COLLATE</span>  utf8_general_ci;<br><br><span class="hljs-keyword">CREATE</span> DATABASE hive <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">COLLATE</span>  utf8_general_ci;<br><br><span class="hljs-keyword">CREATE</span> DATABASE oozie <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">COLLATE</span>  utf8_general_ci;<br><br><span class="hljs-keyword">CREATE</span> DATABASE hue <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">COLLATE</span>  utf8_general_ci;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;scm&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;Scm@1234&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;scm&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br>flush privileges;<br></code></pre></td></tr></table></figure></li><li><p>创建存放mysql驱动的文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /usr/share/java<br><br>cp mysql-connector-java.jar /usr/share/java/<br><br>scp -r /usr/share/java/ hadoop02:/usr/share/<br>scp -r /usr/share/java/ hadoop03:/usr/share/<br></code></pre></td></tr></table></figure></li><li><p>创建CM本地源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建本地源</span><br>createrepo /var/www/html/cloudera-repos/cm6/6.2.1/redhat7<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置本地源，创建文件 *.repo 一定要以repo为文件后缀名</span><br>touch /etc/yum.repos.d/cloudera-local.repo<br>vim /etc/yum.repos.d/cloudera-local.repo<br><br>[cloudera-local]<br>name=cloudera-local<br>baseurl=http://hadoop102/CDH6.3.2/cm6.3.1/RPMS/x86_64<br>gpgcheck=0<br>enabled=1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">同步repo文件</span><br>scp cloudera-local.repo hadoop02:/etc/yum.repos.d/<br>scp cloudera-local.repo hadoop03:/etc/yum.repos.d/<br><br>[root@hadoop0X ~]# yum clean all &amp;&amp; yum makecache<br>[root@hadoop0X ~]# yum list | grep cloudera<br>cloudera-manager-agent.x86_64               6.2.1-1426065.el7          cloudera-local<br>cloudera-manager-daemons.x86_64             6.2.1-1426065.el7          cloudera-local<br>cloudera-manager-server.x86_64              6.2.1-1426065.el7          cloudera-local<br>cloudera-manager-server-db-2.x86_64         6.2.1-1426065.el7          cloudera-local<br>enterprise-debuginfo.x86_64                 6.2.1-1426065.el7          cloudera-local<br>oracle-j2sdk1.8.x86_64                      1.8.0+update181-1          cloudera-local<br></code></pre></td></tr></table></figure></li><li><p>安装server，agent，daemons</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">所有节点都要安装daemons agent，只需要在服务节点安装server</span><br>[root@hadoop01 ~]# yum install -y cloudera-manager-daemons cloudera-manager-agent cloudera-manager-server<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改agent配置文件</span><br>vim /etc/cloudera-scm-agent/config.ini<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Hostname of the CM server.</span><br>server_host=hadoop01<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">分发agent配置文件</span><br>scp config.ini hadoop02:/etc/cloudera-scm-agent/<br>scp config.ini hadoop03:/etc/cloudera-scm-agent/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将离线文件放到/opt/cloudera/parcel-repo,此文件夹存放离线安装文件</span><br>cp CDH-6.2.1-1.cdh6.2.1.p0.1425774-el7.parcel CDH-6.2.1-1.cdh6.2.1.p0.1425774-el7.parcel.sha1 CDH-6.2.1-1.cdh6.2.1.p0.1425774-el7.parcel.sha256 manifest.json /opt/cloudera/parcel-repo/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">比较sha1和sha256校验码，一致的将文件名称改为*.sha</span><br>sha1sum CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel<br>d2a3d0be2524f37dbf686677cc45f3f8a3bd2cfd  CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel<br><br>cat CDH-6.2.1-1.cdh6.2.1.p0.1425774-el7.parcel.sha1<br>d2a3d0be2524f37dbf686677cc45f3f8a3bd2cfd<br><br>cat CDH-6.2.1-1.cdh6.2.1.p0.1425774-el7.parcel.sha256<br>8b6e51b900832a39c22fa6a778f8188836c25c99de3280c3ff81f17472deff72<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除不相同的，将相同的*.sha1改名为*.sha</span><br>mv CDH-6.2.1-1.cdh6.2.1.p0.1425774-el7.parcel.sha1 CDH-6.2.1-1.cdh6.2.1.p0.1425774-el7.parcel.sha<br>rm -rf CDH-6.2.1-1.cdh6.2.1.p0.1425774-el7.parcel.sha256<br>   <br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置server连接的数据库</span><br>vim /etc/cloudera-scm-server/db.properties<br>com.cloudera.cmf.db.type=mysql<br>com.cloudera.cmf.db.host=hadoop01<br>com.cloudera.cmf.db.name=scm<br>com.cloudera.cmf.db.user=root<br>com.cloudera.cmf.db.password=Cdh@123456<br>com.cloudera.cmf.db.setupType=EXTERNAL<br>   <br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行初始化数据库脚本</span><br>/opt/cloudera/cm/schema/scm_prepare_database.sh mysql scm root Cdh@123456<br></code></pre></td></tr></table></figure></li></ul></li><li><p>启动server和agent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看启动日志</span><br>[root@hadoop01 ~]# tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log<br>   <br>[root@hadoop01 ~]# systemctl start cloudera-scm-server<br>   <br>[root@hadoop0X ~]# systemctl start cloudera-scm-agent<br></code></pre></td></tr></table></figure><blockquote><p>启动成功后访问：hadoop102:7180</p><p>用户名：admin</p><p>密码：admin</p><p>ALTER USER root@localhost IDENTIFIED WITH mysql_native_password BY ‘Cdh@123456’;</p></blockquote><img src="/2023/12/21/CDH/1643100472883.png" class="" title="CM登录页面"></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>BigData</tag>
      
      <tag>CDH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定时任务</title>
    <link href="/2023/11/16/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2023/11/16/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Springboot集成定时任务"><a href="#Springboot集成定时任务" class="headerlink" title="Springboot集成定时任务"></a>Springboot集成定时任务</h1><h2 id="静态定时任务"><a href="#静态定时任务" class="headerlink" title="静态定时任务"></a>静态定时任务</h2><blockquote><p>静态定时任务是指应用跑起来后，任务的执行时间无法进行动态修改。</p></blockquote><h3 id="单线程定时任务"><a href="#单线程定时任务" class="headerlink" title="单线程定时任务"></a>单线程定时任务</h3><ol><li><p>使用注解开启定时任务 <strong>@EnableScheduling</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootQuartzApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootQuartzApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建任务 <strong>@Scheduled</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownLoadTask</span> &#123;<br><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/10 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">justDoIt</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始下载银行对账文件&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;银行对账文件下载完成，进行解密操作&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;银行对账文件下载解密完成&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可按照需求进行任务执行时间</p><ol><li>cron：使用Cron表达式执行定时任务</li><li>fixedDelay：固定延迟执行，例如距离上次成功执行后5秒执行</li><li>fixedRate：固定速率执行，例如每隔5秒执行一次</li><li>initialDelay：初始延迟任务，例如任务开启5秒后执行，之后再以固定频率或者间隔执行</li></ol></li></ol><blockquote><p>Note：此方式只有一个调度线程执行任务，在多任务时，效果就会差很多</p></blockquote><h3 id="多线程定时任务"><a href="#多线程定时任务" class="headerlink" title="多线程定时任务"></a>多线程定时任务</h3><ol><li><p>定义线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SchedulerConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean(name = &quot;bankThreadPool&quot;)</span><br>    <span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">bankExecutor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ThreadPoolTaskExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolTaskExecutor</span>();<br>        <span class="hljs-comment">// 设置核心线程数为 3</span><br>        executor.setCorePoolSize(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// 最大线程数为10</span><br>        executor.setMaxPoolSize(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// 任务队列的大小</span><br>        executor.setQueueCapacity(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// 线程前缀名</span><br>        executor.setThreadNamePrefix(<span class="hljs-string">&quot;bankExecutor-&quot;</span>);<br>        <span class="hljs-comment">// 线程存活时间</span><br>        executor.setKeepAliveSeconds(<span class="hljs-number">30</span>);<br>        <span class="hljs-comment">// 初始化</span><br>        executor.initialize();<br>        <span class="hljs-keyword">return</span> executor;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建任务 <strong>@EnableAsync @Async</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@EnableAsync</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownLoadTask</span> &#123;<br><br>    <span class="hljs-meta">@Async(&quot;bankThreadPool&quot;)</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/1 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">justDoIt</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始下载银行 A 的对账文件&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;银行 A 对账文件下载完成，进行解密操作&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;银行 A 对账文件下载解密完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Async(&quot;bankThreadPool&quot;)</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/1 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">justDoIt2</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始下载银行 B 的对账文件&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;银行 B 对账文件下载完成，进行解密操作&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;银行 B 对账文件下载解密完成&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2023/11/16/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/image-20231116104653766.png" class="" title="image-20231116104653766"></li></ol><h2 id="动态定时任务"><a href="#动态定时任务" class="headerlink" title="动态定时任务"></a>动态定时任务</h2><ol><li><p>定义任务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态定时任务实现步骤</span><br><span class="hljs-comment"> * 步骤1：定义定时任务 DownLoadTaskV3 类实现 SchedulingConfigurer 接口；</span><br><span class="hljs-comment"> * 步骤2：编写定时任务要执行的业务逻辑；</span><br><span class="hljs-comment"> * 步骤3：数据库中配置任务执行的具体时间规则，记住任务名称</span><br><span class="hljs-comment"> * 步骤4：根据任务名称从数据库获取 Cron 参数，设置任务触发器，触发任务执行。</span><br><span class="hljs-comment"> * （仅抛砖引玉，可作进一步的抽象）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownLoadTaskV3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SchedulingConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    TaskInfoMapper taskInfoMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureTasks</span><span class="hljs-params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">// 步骤2：编写定时任务要执行的业务逻辑(可以进一步抽象)。</span><br>                log.info(<span class="hljs-string">&quot;V3-开始下载银行 C 的对账文件&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;V3-银行 C 对账文件下载完成，进行解密操作&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;V3-银行 C 对账文件下载解密完成&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// 步骤 4：根据任务名称从数据库获取 Cron 参数，设置任务触发器，触发任务执行。</span><br>        <span class="hljs-type">Trigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trigger</span>() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 每一次任务触发，都会调用一次该方法</span><br><span class="hljs-comment">             * 然后重新获取下一次的执行时间</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">nextExecutionTime</span><span class="hljs-params">(TriggerContext triggerContext)</span> &#123;<br>                <span class="hljs-comment">// 方式一：执行时间硬编码</span><br>                <span class="hljs-comment">//String cron = &quot;0/1 * * * * ?&quot;;</span><br><br>                <span class="hljs-comment">// 方式二：动态获取执行时间（从数据库、redis 等都可以做任务执行时间的存储管理，本次以数据库为例）</span><br>                <span class="hljs-type">TaskInfo</span> <span class="hljs-variable">taskInfo</span> <span class="hljs-operator">=</span> taskInfoMapper.selectById(<span class="hljs-number">1</span>);<br><br>                <span class="hljs-type">String</span> <span class="hljs-variable">cron</span> <span class="hljs-operator">=</span> taskInfo.getCron();<br>                <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CronTrigger</span>(cron);<br>                <span class="hljs-keyword">return</span> trigger.nextExecutionTime(triggerContext);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">// 设置任务触发器，触发任务执行。</span><br>        taskRegistrar.addTriggerTask(task, trigger);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建任务信息表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `SC_TASK_INFO` (<br>  `id` <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `cron` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;定时执行&#x27;</span>,<br>  `job_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;任务名称&#x27;</span>,<br>  `status` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;任务开启状态 0-关闭 2-开启&#x27;</span>,<br>  `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;定时任务表&#x27;</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `SC_TASK_INFO` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0/10 * * * * ?&#x27;</span>, <span class="hljs-string">&#x27;downLoadTaskV3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;2020-03-01 16:43:50&#x27;</span>, <span class="hljs-string">&#x27;2020-06-11 11:06:09&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;SC_TASK_INFO&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskInfo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String cron;<br>    <span class="hljs-keyword">private</span> String jobName;<br>    <span class="hljs-keyword">private</span> String status;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>声明Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TaskInfoMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;TaskInfo&gt; &#123;&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="集成Quarttz定时任务"><a href="#集成Quarttz定时任务" class="headerlink" title="集成Quarttz定时任务"></a>集成Quarttz定时任务</h2><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入 Quartz 依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>定义任务类</p><blockquote><p>可以通过实现 Job 接口来定义任务，也可以通过继承 QuartzJobBean 这个抽象类来定义任务，其实 QuartzJobBean 本身也实现了 Job 接口，其本质都是实现 Job 接口来定义任务。</p></blockquote></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://cloud.tencent.com/developer/article/1947189">https://cloud.tencent.com/developer/article/1947189</a></p><p><a href="https://cloud.tencent.com/developer/article/1947191">https://cloud.tencent.com/developer/article/1947191</a></p><p><a href="https://cloud.tencent.com/developer/article/1947192">https://cloud.tencent.com/developer/article/1947192</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Quartz</tag>
      
      <tag>定时任务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>knife4j教程</title>
    <link href="/2023/11/15/knife4j%E6%95%99%E7%A8%8B/"/>
    <url>/2023/11/15/knife4j%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><a href="https://doc.xiaominfo.com/docs/action/springboot">官方文档</a></p><h2 id="Springboot框架集成Knife4j"><a href="#Springboot框架集成Knife4j" class="headerlink" title="Springboot框架集成Knife4j"></a>Springboot框架集成Knife4j</h2><ol><li><p>Maven依赖引入</p><p><code>Note:</code>注意引入版本与springboot版本关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建Swagger配置依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2WebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Knife4jConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean(value = &quot;defaultApi2&quot;)</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">defaultApi2</span><span class="hljs-params">()</span> &#123;<br>        Docket docket=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                        <span class="hljs-comment">//.title(&quot;swagger-bootstrap-ui-demo RESTful APIs&quot;)</span><br>                        .description(<span class="hljs-string">&quot;# swagger-bootstrap-ui-demo RESTful APIs&quot;</span>)<br>                        .termsOfServiceUrl(<span class="hljs-string">&quot;http://www.xx.com/&quot;</span>)<br>                        .contact(<span class="hljs-string">&quot;xx@qq.com&quot;</span>)<br>                        .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                        .build())<br>                <span class="hljs-comment">//分组名称</span><br>                .groupName(<span class="hljs-string">&quot;2.X版本&quot;</span>)<br>                .select()<br>                <span class="hljs-comment">//这里指定Controller扫描包路径</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.github.xiaoymin.knife4j.controller&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>        <span class="hljs-keyword">return</span> docket;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;首页模块&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br>    <span class="hljs-meta">@ApiImplicitParam(name = &quot;name&quot;,value = &quot;姓名&quot;,required = true)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;向客人问好&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/sayHi&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">sayHi</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;)</span>String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Hi:&quot;</span>+name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动Spring Boot工程，在浏览器中访问：<code>http://localhost:8080/doc.html</code></p></li></ol><h2 id="待补充相关注解使用"><a href="#待补充相关注解使用" class="headerlink" title="待补充相关注解使用"></a>待补充相关注解使用</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Knife4j</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Slf4j使用教程</title>
    <link href="/2023/10/21/Slf4j%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2023/10/21/Slf4j%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1-单一项目（测试）"><a href="#1-单一项目（测试）" class="headerlink" title="1. 单一项目（测试）"></a>1. 单一项目（测试）</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-simple<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Test Slf4j &#123;&#125;&quot;</span>, <span class="hljs-string">&quot;测试测试&quot;</span>);<br>        System.out.println(<span class="hljs-number">7777</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[main] INFO Test - Test Slf4j 测试测试<br></code></pre></td></tr></table></figure><h3 id="2-项目使用（项目集成）"><a href="#2-项目使用（项目集成）" class="headerlink" title="2. 项目使用（项目集成）"></a>2. 项目使用（项目集成）</h3><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="添加-log4j-properties文件"><a href="#添加-log4j-properties文件" class="headerlink" title="添加 log4j.properties文件"></a>添加 log4j.properties文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">### 设置###</span><br><span class="hljs-attr">log4j.rootLogger</span> = <span class="hljs-string">info,stdout,D,E</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### 输出信息到控制抬 ###</span><br><span class="hljs-attr">log4j.appender.stdout</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.stdout.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.stdout.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="hljs-string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### 输出DEBUG 级别以上的日志到=logs/error.log ###</span><br><span class="hljs-attr">log4j.appender.D</span> = <span class="hljs-string">org.apache.log4j.DailyRollingFileAppender</span><br><span class="hljs-attr">log4j.appender.D.File</span> = <span class="hljs-string">logs/log.log</span><br><span class="hljs-attr">log4j.appender.D.Append</span> = <span class="hljs-string">true</span><br><span class="hljs-attr">log4j.appender.D.Threshold</span> = <span class="hljs-string">DEBUG </span><br><span class="hljs-attr">log4j.appender.D.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.D.layout.ConversionPattern</span> = <span class="hljs-string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### 输出ERROR 级别以上的日志到=logs/error.log ###</span><br><span class="hljs-attr">log4j.appender.E</span> = <span class="hljs-string">org.apache.log4j.DailyRollingFileAppender</span><br><span class="hljs-attr">log4j.appender.E.File</span> =<span class="hljs-string">logs/error.log </span><br><span class="hljs-attr">log4j.appender.E.Append</span> = <span class="hljs-string">true</span><br><span class="hljs-attr">log4j.appender.E.Threshold</span> = <span class="hljs-string">ERROR </span><br><span class="hljs-attr">log4j.appender.E.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.E.layout.ConversionPattern</span> = <span class="hljs-string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br></code></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Test Slf4j &#123;&#125;&quot;</span>, <span class="hljs-string">&quot;测试测试&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考资料：<a href="https://juejin.cn/post/6921246140822192141">https://juejin.cn/post/6921246140822192141</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Slf4j</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用规范</title>
    <link href="/2023/09/07/Git%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
    <url>/2023/09/07/Git%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Git使用规范"><a href="#Git使用规范" class="headerlink" title="Git使用规范"></a>Git使用规范</h1><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><h3 id="主分支（master-main）"><a href="#主分支（master-main）" class="headerlink" title="主分支（master&#x2F;main）"></a>主分支（master&#x2F;main）</h3><blockquote><p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。</p><p><strong>gitee默认创建master</strong></p><p><strong>github默认创建main</strong></p><p>版本库初始化以后，默认就是在主分支在进行开发</p></blockquote><img src="/2023/09/07/Git%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/1.png" class="" title="截屏2023-08-24 11.08.45"><h3 id="开发分支（develop）"><a href="#开发分支（develop）" class="headerlink" title="开发分支（develop）"></a>开发分支（develop）</h3><ul><li><p>说明</p><blockquote><p>分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。</p><p>此分支有我们自行创建</p></blockquote></li><li><p>创建命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b develop master # 基于主分支创建开发分支，并切换到开发分支<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">相当于：</span><br>git branch develop # 创建develop分支<br> <br>git checkout develop # 切换到develop分支<br></code></pre></td></tr></table></figure></li></ul><img src="/2023/09/07/Git%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/2.png" class="" title="截屏2023-08-24 11.13.40"><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><ol><li><p>拉去最新develop分支代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull origin develop<br></code></pre></td></tr></table></figure></li><li><p>进行开发，开发完成后提交develop分支代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br>git cz<br>git push origin develop<br></code></pre></td></tr></table></figure></li><li><p>开发完成后，进行将develop分支代码合并到主分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff develop master # 合并之前，可以查看两分支的不同之处（可选命令）<br><br>git checkout master # 切换到主分支<br>git merge --no-ff develop # 将指定分支合并到当前分支<br><span class="hljs-meta prompt_"># </span><span class="language-bash">--no-ff 参数介绍：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">默认情况下，Git执行<span class="hljs-string">&quot;快进式合并&quot;</span>（fast-farward merge），会直接将Master分支指向Develop分支</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法</span><br></code></pre></td></tr></table></figure></li><li><p>合并完成，提交即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull -u origin master # 拉去最新主分支代码<br>git push -u origin master # 将提交的代码推送出去<br></code></pre></td></tr></table></figure></li><li><p>合并完成后，可以删除分支（develop日常保留，有临时分支时，完成临时分支开发后，可进行分支删除）（可选步骤）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -d release # 删除release分支<br></code></pre></td></tr></table></figure></li></ol><h2 id="相关参考文档"><a href="#相关参考文档" class="headerlink" title="相关参考文档"></a>相关参考文档</h2><p>文档参考：</p><ul><li><a href="https://blog.csdn.net/Junna_zeng/article/details/116779206">Git分支管理策略</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Commit提交规范</title>
    <link href="/2023/09/07/Git-Commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
    <url>/2023/09/07/Git-Commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h2 id="Git-Commit提交规范"><a href="#Git-Commit提交规范" class="headerlink" title="Git Commit提交规范"></a>Git Commit提交规范</h2><ol><li><p>进行全局安装cz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g commitizen  # 系统将弹出上述type、scope等来填写<br>npm install -g cz-conventional-changelog # 用来规范提交信息<br></code></pre></td></tr></table></figure></li><li><p>安装完成后,项目文件夹内进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm init # 初始化npm<br>commitizen init cz-conventional-changelog --save --force --save-exact # 在项目内添加对应以来,以及初始化<br></code></pre></td></tr></table></figure></li><li><p>安装完成后使用git cz命令提交即可</p><img src="/2023/09/07/Git-Commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/image-20230626150341169-4052049.png" class="" title="image-20230626150341169"><ul><li>type: <code>必填</code> commit 类型，有业内常用的字段，也可以根据需要自己定义<ul><li>feat 增加新功能</li><li>fix 修复问题&#x2F;BUG</li><li>style 代码风格相关无影响运行结果的</li><li>perf 优化&#x2F;性能提升</li><li>refactor 重构</li><li>revert 撤销修改</li><li>test 测试相关</li><li>docs 文档&#x2F;注释</li><li>chore 依赖更新&#x2F;脚手架配置修改等</li><li>workflow 工作流改进</li><li>ci 持续集成</li><li>types 类型定义文件更改</li><li>wip 开发中</li><li>undef 不确定的分类</li></ul></li><li>scope: commit 影响的范围, 比如某某组件、某某页面</li><li>subject: <code>必填</code> 简短的概述提交的代码，建议符合 50&#x2F;72 formatting</li><li>body: commit 具体修改内容, 可以分为多行, 建议符合 50&#x2F;72 formatting</li><li>footer: 其他备注, 包括 breaking changes 和 issues 两部分</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github+hexo搭建个人博客</title>
    <link href="/2023/09/06/Github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/09/06/Github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="Github建立仓库"><a href="#Github建立仓库" class="headerlink" title="Github建立仓库"></a>Github建立仓库</h2><ol><li><p>登陆个人github账号</p></li><li><p>创建新的仓库</p><img src="/2023/09/06/Github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230906185656784.png" class="" title="image-20230906185656784"><img src="/2023/09/06/Github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230906185825727.png" class="" title="image-20230906185825727"></li></ol><h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew search npm</span><br>==&gt; Formulae<br>npm ✔   pnpm    nfpm    nim     nvm     tpm     rpm     qpm     gpm     cpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew install npm</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm -v</span><br>9.8.0<br></code></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g hexo-cli</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo -v</span><br>INFO  Validating config<br>hexo: 6.3.0<br>hexo-cli: 4.3.1<br>os: darwin 21.6.0 12.5<br><br>node: 20.5.1<br>acorn: 8.10.0<br>ada: 2.5.1<br>ares: 1.19.1<br>base64: 0.5.0<br>brotli: 1.0.9<br>cjs_module_lexer: 1.2.2<br>cldr: 43.1<br>icu: 73.2<br>llhttp: 8.1.1<br>modules: 115<br>napi: 9<br>nghttp2: 1.55.1<br>openssl: 3.1.2<br>simdutf: 3.2.14<br>tz: 2023c<br>undici: 5.22.1<br>unicode: 15.0<br>uv: 1.46.0<br>uvwasi: 0.0.18<br>v8: 11.3.244.8-node.10<br>zlib: 1.2.11<br></code></pre></td></tr></table></figure><h3 id="创建自己的blog目录，并进行初始化"><a href="#创建自己的blog目录，并进行初始化" class="headerlink" title="创建自己的blog目录，并进行初始化"></a>创建自己的blog目录，并进行初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init my-blog</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> my-blog</span><br></code></pre></td></tr></table></figure><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid主题</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">my-blog/themes，克隆主题库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid.git</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># my-blog/_config.yml，修改相关配置</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">hexo-theme-fluid</span> <span class="hljs-comment"># 修改主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment"># 修改语言</span><br></code></pre></td></tr></table></figure><h3 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></code></pre></td></tr></table></figure><p><strong>访问：localhost:4000</strong></p><img src="/2023/09/06/Github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230906191201353.png" class="" title="image-20230906191201353"><h2 id="配置github远程仓库"><a href="#配置github远程仓库" class="headerlink" title="配置github远程仓库"></a>配置github远程仓库</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/YueCang/yuecang.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">必填</span><br></code></pre></td></tr></table></figure><h2 id="部署到远程仓库"><a href="#部署到远程仓库" class="headerlink" title="部署到远程仓库"></a>部署到远程仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">部署之前需要安装部署工具</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install hexo-deployer-git --save</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo clean &amp; hexo g &amp; hexo d</span><br></code></pre></td></tr></table></figure><p><strong>访问：<a href="https://yuecang.github.io/">https://yuecang.github.io/</a></strong></p><img src="/2023/09/06/Github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230906191506323.png" class="" title="image-20230906191506323"><h2 id="相关问题解决"><a href="#相关问题解决" class="headerlink" title="相关问题解决"></a>相关问题解决</h2><h3 id="文章图片不显示"><a href="#文章图片不显示" class="headerlink" title="文章图片不显示"></a>文章图片不显示</h3><ol><li><p>安装插件,<strong>注意是img插件</strong>，而不是image插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install hexo-asset-img --save</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 修改为true</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>配置 <strong>Typora</strong>偏好设置，如下图更改，此操作将图片文件保存路径: .&#x2F;${filename} 即保存到与 当前正在编辑的文件名相同的同级文,<strong>这样就不需要每次写文档都要更改图片路径了</strong></p><img src="/2023/09/06/Github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230906192211178.png" class="" title="image-20230906192211178"></li><li><p>重新部署即可</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
